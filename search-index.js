var searchIndex = {};
searchIndex["dbus"] = {"doc":"D-Bus bindings for Rust","items":[[3,"Message","dbus","A D-Bus message. A message contains some headers (e g sender and destination address)\nand a list of MessageItems.",null,null],[3,"OwnedFd","","An RAII wrapper around Fd to ensure that file descriptor is closed\nwhen the scope ends.",null,null],[3,"PropHandler","","Wrapper around Props that keeps a map of fetched properties.",null,null],[3,"Props","","Client side properties - get and set properties on a remote application.",null,null],[3,"Watch","","A file descriptor to watch for incoming events (for async I/O).",null,null],[3,"Signature","","A wrapper around a string that is guaranteed to be\na valid (single) D-Bus type signature. Supersedes TypeSig.",null,null],[3,"Path","","A wrapper around a string that is guaranteed to be\na valid D-Bus object path.",null,null],[3,"Interface","","A wrapper around a string that is guaranteed to be\na valid D-Bus interface name.",null,null],[3,"Member","","A wrapper around a string that is guaranteed to be\na valid D-Bus member, i e, a signal or method name.",null,null],[3,"ErrorName","","A wrapper around a string that is guaranteed to be\na valid D-Bus bus name.",null,null],[3,"BusName","","A wrapper around a string that is guaranteed to be\na valid D-Bus bus name.",null,null],[3,"Error","","D-Bus Error wrapper",null,null],[3,"ConnectionItems","","ConnectionItem iterator",null,null],[3,"Connection","","A D-Bus connection. Start here if you want to get on the D-Bus!",null,null],[4,"BusType","","",null,null],[13,"Session","","",0,null],[13,"System","","",0,null],[13,"Starter","","",0,null],[4,"NameFlag","","",null,null],[13,"AllowReplacement","","",1,null],[13,"ReplaceExisting","","",1,null],[13,"DoNotQueue","","",1,null],[4,"RequestNameReply","","",null,null],[13,"PrimaryOwner","","",2,null],[13,"InQueue","","",2,null],[13,"Exists","","",2,null],[13,"AlreadyOwner","","",2,null],[4,"ReleaseNameReply","","",null,null],[13,"Released","","",3,null],[13,"NonExistent","","",3,null],[13,"NotOwner","","",3,null],[4,"MessageType","","",null,null],[13,"Invalid","","",4,null],[13,"MethodCall","","",4,null],[13,"MethodReturn","","",4,null],[13,"Error","","",4,null],[13,"Signal","","",4,null],[4,"WatchEvent","","",null,null],[13,"Readable","","",5,null],[13,"Writable","","",5,null],[13,"Error","","",5,null],[13,"Hangup","","",5,null],[4,"MessageItem","","MessageItem - used as parameters and return values from\nmethod calls, or as data added to a signal.",null,null],[13,"Array","","A D-Bus array requires all elements to be of the same type.\nAll elements must match the TypeSig.",6,null],[13,"Struct","","A D-Bus struct allows for values of different types.",6,null],[13,"Variant","","A D-Bus variant is a wrapper around another `MessageItem`, which\ncan be of any type.",6,null],[13,"DictEntry","","A D-Bus dictionary is an Array of DictEntry items.",6,null],[13,"ObjectPath","","A D-Bus objectpath requires its content to be a valid objectpath,\nso this cannot be any string.",6,null],[13,"Str","","A D-Bus String is zero terminated, so no \\0 s in the String, please.\n(D-Bus strings are also - like Rust strings - required to be valid UTF-8.)",6,null],[13,"Bool","","A D-Bus boolean type.",6,null],[13,"Byte","","A D-Bus unsigned 8 bit type.",6,null],[13,"Int16","","A D-Bus signed 16 bit type.",6,null],[13,"Int32","","A D-Bus signed 32 bit type.",6,null],[13,"Int64","","A D-Bus signed 64 bit type.",6,null],[13,"UInt16","","A D-Bus unsigned 16 bit type.",6,null],[13,"UInt32","","A D-Bus unsigned 32 bit type.",6,null],[13,"UInt64","","A D-Bus unsigned 64 bit type.",6,null],[13,"Double","","A D-Bus IEEE-754 double-precision floating point type.",6,null],[13,"UnixFd","","D-Bus allows for sending file descriptors, which can be used to\nset up SHM, unix pipes, or other communication channels.",6,null],[4,"ArrayError","","Errors that can happen when creating a MessageItem::Array.",null,null],[13,"EmptyArray","","The array is empty.",7,null],[13,"DifferentElementTypes","","The array is composed of different element types.",7,null],[4,"ConnectionItem","","When listening for incoming events on the D-Bus, this enum will tell you what type\nof incoming event has happened.",null,null],[13,"Nothing","","No event between now and timeout",8,null],[13,"MethodCall","","Incoming method call",8,null],[13,"Signal","","Incoming signal",8,null],[13,"MethodReturn","","Incoming method return (mostly used for Async I/O)",8,null],[13,"WatchFd","","Indicates whether a file descriptor should be monitored or not.\nUnless you&#39;re doing Async I/O, you can simply ignore this variant.",8,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"fmt","","",9,null],[11,"new","","Create a new OwnedFd from a RawFd.",9,{"inputs":[{"name":"rawfd"}],"output":{"name":"ownedfd"}}],[11,"into_fd","","Convert an OwnedFD back into a RawFd.",9,null],[11,"drop","","",9,null],[11,"clone","","",9,null],[11,"as_raw_fd","","",9,null],[11,"clone","","",6,null],[11,"partial_cmp","","",6,null],[11,"lt","","",6,null],[11,"le","","",6,null],[11,"gt","","",6,null],[11,"ge","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"fmt","","",6,null],[11,"type_sig","","Get the D-Bus ASCII type-code for this MessageItem.",6,null],[11,"array_type","","Get the integer value for this MessageItem&#39;s type-code.",6,null],[11,"from_dict","","Creates a (String, Variant) dictionary from an iterator with Result passthrough (an Err will abort and return that Err)",6,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"new_array","","Creates an MessageItem::Array from a list of MessageItems.",6,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"inner","","Conveniently get the inner value of a `MessageItem`",6,null],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"messageitem"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"messageitem"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"messageitem"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"messageitem"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"messageitem"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"messageitem"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"messageitem"}}],[11,"from","","",6,{"inputs":[{"name":"f64"}],"output":{"name":"messageitem"}}],[11,"from","","",6,{"inputs":[{"name":"bool"}],"output":{"name":"messageitem"}}],[11,"from","","",6,null],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"messageitem"}}],[11,"from","","",6,{"inputs":[{"name":"string"}],"output":{"name":"messageitem"}}],[11,"from","","",6,{"inputs":[{"name":"path"}],"output":{"name":"messageitem"}}],[11,"from","","",6,{"inputs":[{"name":"ownedfd"}],"output":{"name":"messageitem"}}],[11,"from","","",6,{"inputs":[{"name":"box"}],"output":{"name":"messageitem"}}],[11,"from","","",6,null],[11,"new_method_call","","Creates a new method call message.",10,{"inputs":[{"name":"d"},{"name":"p"},{"name":"i"},{"name":"m"}],"output":{"name":"result"}}],[11,"method_call","","Creates a new method call message.",10,{"inputs":[{"name":"busname"},{"name":"path"},{"name":"interface"},{"name":"member"}],"output":{"name":"message"}}],[11,"new_signal","","Creates a new signal message.",10,{"inputs":[{"name":"p"},{"name":"i"},{"name":"m"}],"output":{"name":"result"}}],[11,"signal","","Creates a new signal message.",10,{"inputs":[{"name":"path"},{"name":"interface"},{"name":"member"}],"output":{"name":"message"}}],[11,"new_method_return","","Creates a method reply for this method call.",10,{"inputs":[{"name":"message"}],"output":{"name":"option"}}],[11,"method_return","","Creates a method return (reply) for this method call.",10,null],[11,"new_error","","The old way to create a new error reply",10,{"inputs":[{"name":"message"},{"name":"str"},{"name":"str"}],"output":{"name":"option"}}],[11,"error","","Creates a new error reply",10,null],[11,"get_items","","Get the MessageItems that make up the message.",10,null],[11,"get_serial","","Get the D-Bus serial of a message, if one was specified.",10,null],[11,"get_reply_serial","","Get the serial of the message this message is a reply to, if present.",10,null],[11,"append_items","","Add one or more MessageItems to this Message.",10,null],[11,"append","","Appends one MessageItem to a message.\nUse in builder style: e g `m.method_return().append(7i32)`",10,null],[11,"append1","","Appends one argument to this message.\nUse in builder style: e g `m.method_return().append1(7i32)`",10,null],[11,"append2","","Appends two arguments to this message.\nUse in builder style: e g `m.method_return().append2(7i32, 6u8)`",10,null],[11,"append3","","Appends three arguments to this message.\nUse in builder style: e g `m.method_return().append3(7i32, 6u8, true)`",10,null],[11,"get1","","Gets the first argument from the message, if that argument is of type G1.\nReturns None if there are not enough arguments, or if types don&#39;t match.",10,null],[11,"get2","","Gets the first two arguments from the message, if those arguments are of type G1 and G2.\nReturns None if there are not enough arguments, or if types don&#39;t match.",10,null],[11,"get3","","Gets the first three arguments from the message, if those arguments are of type G1, G2 and G3.\nReturns None if there are not enough arguments, or if types don&#39;t match.",10,null],[11,"get4","","Gets the first four arguments from the message, if those arguments are of type G1, G2, G3 and G4.\nReturns None if there are not enough arguments, or if types don&#39;t match.",10,null],[11,"get5","","Gets the first five arguments from the message, if those arguments are of type G1, G2, G3 and G4.\nReturns None if there are not enough arguments, or if types don&#39;t match.\nNote: If you need more than five arguments, use `iter_init` instead.",10,null],[11,"iter_init","","Returns a struct for retreiving the arguments from a message. Supersedes get_items().",10,null],[11,"msg_type","","Gets the MessageType of the Message.",10,null],[11,"sender","","Gets the name of the connection that originated this message.",10,null],[11,"headers","","Returns a tuple of (Message type, Path, Interface, Member) of the current message.",10,null],[11,"path","","Gets the object path this Message is being sent to.",10,null],[11,"interface","","Gets the interface this Message is being sent to.",10,null],[11,"member","","Gets the interface member being called.",10,null],[11,"as_result","","When the remote end returns an error, the message itself is\ncorrect but its contents is an error. This method will\ntransform such an error to a D-Bus Error or otherwise return\nthe original message.",10,null],[11,"drop","","",10,null],[11,"fmt","","",10,null],[11,"new","","Create a new Props.",11,{"inputs":[{"name":"connection"},{"name":"n"},{"name":"p"},{"name":"i"},{"name":"i32"}],"output":{"name":"props"}}],[11,"get","","Get a single property&#39;s value.",11,null],[11,"set","","Set a single property&#39;s value.",11,null],[11,"get_all","","Get a map of all the properties&#39; names and their values.",11,null],[11,"new","","Create a new PropHandler from a Props.",12,{"inputs":[{"name":"props"}],"output":{"name":"prophandler"}}],[11,"get_all","","Get a map of all the properties&#39; names and their values.",12,null],[11,"map_mut","","Get a mutable reference to the PropHandler&#39;s fetched properties.",12,null],[11,"map","","Get a reference to the PropHandler&#39;s fetched properties.",12,null],[11,"get","","Get a single property&#39;s value.",12,null],[11,"set","","Set a single property&#39;s value.",12,null],[11,"get","","",6,null],[11,"cmp","","",13,null],[11,"partial_cmp","","",13,null],[11,"lt","","",13,null],[11,"le","","",13,null],[11,"gt","","",13,null],[11,"ge","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"fd","","Get the RawFd this Watch is for",13,null],[11,"readable","","Add POLLIN to events to listen for",13,null],[11,"writable","","Add POLLOUT to events to listen for",13,null],[11,"to_pollfd","","Returns the current watch as a libc::pollfd, to use with libc::poll",13,null],[11,"as_raw_fd","","",13,null],[11,"arg_type","","",9,{"inputs":[],"output":{"name":"i32"}}],[11,"signature","","",9,{"inputs":[],"output":{"name":"signature"}}],[11,"append","","",9,null],[11,"get","","",9,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"arg_type","collections::string","",14,{"inputs":[],"output":{"name":"i32"}}],[11,"signature","","",14,{"inputs":[],"output":{"name":"signature"}}],[11,"append","","",14,null],[11,"get","","",14,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"arg_type","dbus","",15,{"inputs":[],"output":{"name":"i32"}}],[11,"signature","","",15,{"inputs":[],"output":{"name":"signature"}}],[11,"append","","",15,null],[11,"get","","",15,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"arg_type","","",16,{"inputs":[],"output":{"name":"i32"}}],[11,"signature","","",16,{"inputs":[],"output":{"name":"signature"}}],[11,"append","","",16,null],[11,"get","","",16,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"append","","",6,null],[11,"get","","",6,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",16,null],[11,"cmp","","",16,null],[11,"partial_cmp","","",16,null],[11,"lt","","",16,null],[11,"le","","",16,null],[11,"gt","","",16,null],[11,"ge","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"fmt","","",16,null],[11,"new","","Creates a new instance of this struct.",16,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"from_slice","","Creates a new instance of this struct. If you end it with \\0,\nit can borrow the slice without extra allocation.",16,null],[11,"from_slice_unchecked","","This function creates a new instance of this struct, without checking.\nIt&#39;s up to you to guarantee that s ends with a \\0 and is valid.",16,null],[11,"as_cstr","","View this struct as a CStr.",16,null],[11,"from","","",16,{"inputs":[{"name":"string"}],"output":{"name":"signature"}}],[11,"from","","",16,{"inputs":[{"name":"string"}],"output":{"name":"signature"}}],[11,"from","","",16,{"inputs":[{"name":"str"}],"output":{"name":"signature"}}],[11,"deref","","",16,null],[11,"fmt","","",16,null],[11,"as_ref","","",16,null],[11,"make","","Makes a D-Bus signature that corresponds to A.",16,{"inputs":[],"output":{"name":"signature"}}],[11,"clone","","",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"lt","","",15,null],[11,"le","","",15,null],[11,"gt","","",15,null],[11,"ge","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"fmt","","",15,null],[11,"new","","Creates a new instance of this struct.",15,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"from_slice","","Creates a new instance of this struct. If you end it with \\0,\nit can borrow the slice without extra allocation.",15,null],[11,"from_slice_unchecked","","This function creates a new instance of this struct, without checking.\nIt&#39;s up to you to guarantee that s ends with a \\0 and is valid.",15,null],[11,"as_cstr","","View this struct as a CStr.",15,null],[11,"from","","",15,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"from","","",15,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"from","","",15,{"inputs":[{"name":"str"}],"output":{"name":"path"}}],[11,"deref","","",15,null],[11,"fmt","","",15,null],[11,"as_ref","","",15,null],[11,"default","","",15,{"inputs":[],"output":{"name":"path"}}],[11,"clone","","",17,null],[11,"cmp","","",17,null],[11,"partial_cmp","","",17,null],[11,"lt","","",17,null],[11,"le","","",17,null],[11,"gt","","",17,null],[11,"ge","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"fmt","","",17,null],[11,"new","","Creates a new instance of this struct.",17,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"from_slice","","Creates a new instance of this struct. If you end it with \\0,\nit can borrow the slice without extra allocation.",17,null],[11,"from_slice_unchecked","","This function creates a new instance of this struct, without checking.\nIt&#39;s up to you to guarantee that s ends with a \\0 and is valid.",17,null],[11,"as_cstr","","View this struct as a CStr.",17,null],[11,"from","","",17,{"inputs":[{"name":"string"}],"output":{"name":"member"}}],[11,"from","","",17,{"inputs":[{"name":"string"}],"output":{"name":"member"}}],[11,"from","","",17,{"inputs":[{"name":"str"}],"output":{"name":"member"}}],[11,"deref","","",17,null],[11,"fmt","","",17,null],[11,"as_ref","","",17,null],[11,"clone","","",18,null],[11,"cmp","","",18,null],[11,"partial_cmp","","",18,null],[11,"lt","","",18,null],[11,"le","","",18,null],[11,"gt","","",18,null],[11,"ge","","",18,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"fmt","","",18,null],[11,"new","","Creates a new instance of this struct.",18,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"from_slice","","Creates a new instance of this struct. If you end it with \\0,\nit can borrow the slice without extra allocation.",18,null],[11,"from_slice_unchecked","","This function creates a new instance of this struct, without checking.\nIt&#39;s up to you to guarantee that s ends with a \\0 and is valid.",18,null],[11,"as_cstr","","View this struct as a CStr.",18,null],[11,"from","","",18,{"inputs":[{"name":"string"}],"output":{"name":"interface"}}],[11,"from","","",18,{"inputs":[{"name":"string"}],"output":{"name":"interface"}}],[11,"from","","",18,{"inputs":[{"name":"str"}],"output":{"name":"interface"}}],[11,"deref","","",18,null],[11,"fmt","","",18,null],[11,"as_ref","","",18,null],[11,"clone","","",19,null],[11,"cmp","","",19,null],[11,"partial_cmp","","",19,null],[11,"lt","","",19,null],[11,"le","","",19,null],[11,"gt","","",19,null],[11,"ge","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"fmt","","",19,null],[11,"new","","Creates a new instance of this struct.",19,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"from_slice","","Creates a new instance of this struct. If you end it with \\0,\nit can borrow the slice without extra allocation.",19,null],[11,"from_slice_unchecked","","This function creates a new instance of this struct, without checking.\nIt&#39;s up to you to guarantee that s ends with a \\0 and is valid.",19,null],[11,"as_cstr","","View this struct as a CStr.",19,null],[11,"from","","",19,{"inputs":[{"name":"string"}],"output":{"name":"busname"}}],[11,"from","","",19,{"inputs":[{"name":"string"}],"output":{"name":"busname"}}],[11,"from","","",19,{"inputs":[{"name":"str"}],"output":{"name":"busname"}}],[11,"deref","","",19,null],[11,"fmt","","",19,null],[11,"as_ref","","",19,null],[11,"clone","","",20,null],[11,"cmp","","",20,null],[11,"partial_cmp","","",20,null],[11,"lt","","",20,null],[11,"le","","",20,null],[11,"gt","","",20,null],[11,"ge","","",20,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"fmt","","",20,null],[11,"new","","Creates a new instance of this struct.",20,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"from_slice","","Creates a new instance of this struct. If you end it with \\0,\nit can borrow the slice without extra allocation.",20,null],[11,"from_slice_unchecked","","This function creates a new instance of this struct, without checking.\nIt&#39;s up to you to guarantee that s ends with a \\0 and is valid.",20,null],[11,"as_cstr","","View this struct as a CStr.",20,null],[11,"from","","",20,{"inputs":[{"name":"string"}],"output":{"name":"errorname"}}],[11,"from","","",20,{"inputs":[{"name":"string"}],"output":{"name":"errorname"}}],[11,"from","","",20,{"inputs":[{"name":"str"}],"output":{"name":"errorname"}}],[11,"deref","","",20,null],[11,"fmt","","",20,null],[11,"as_ref","","",20,null],[0,"arg","","Types and traits for easily getting a message&#39;s arguments, or appening a message with arguments.",null,null],[3,"Iter","dbus::arg","Helper struct for retrieve one or more arguments from a Message.\nNote that this is not a Rust iterator, because arguments are often of different types",null,null],[3,"TypeMismatchError","","Error struct to indicate a D-Bus argument type mismatch.",null,null],[3,"IterAppend","","Helper struct for appending one or more arguments to a Message.",null,null],[3,"Array","","Represents a D-Bus Array. Maximum flexibility (wraps an iterator of items to append).\nNote: Slices of FixedArray can be faster.",null,null],[3,"Variant","","A simple wrapper to specify a D-Bus variant.",null,null],[12,"0","","",21,null],[3,"Dict","","Append a D-Bus dict type (i e, an array of dict entries).",null,null],[8,"Arg","","Types that can represent a D-Bus message argument implement this trait.",null,null],[10,"arg_type","","The corresponding D-Bus argument type code.",22,{"inputs":[],"output":{"name":"i32"}}],[10,"signature","","The corresponding D-Bus type signature for this type.",22,{"inputs":[],"output":{"name":"signature"}}],[8,"FixedArray","","If a type implements this trait, it means the size and alignment is the same\nas in D-Bus. This means that you can quickly append and get slices of this type.",null,null],[8,"Get","","Types that can be retrieved from a message as arguments implement this trait.",null,null],[10,"get","","Performs the get operation.",23,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[8,"DictKey","","Types that can be used as keys in a dict type implement this trait.",null,null],[8,"Append","","Types that can be appended to a message as arguments implement this trait.",null,null],[10,"append","","Performs the append operation.",24,null],[0,"obj","dbus","Contains functionality for the &quot;server&quot; of a D-Bus object. A remote application can\nintrospect this object and call methods on it.\nDeprecated - use the `tree` module instead.",null,null],[3,"ObjectPath","dbus::obj","Represents a D-Bus object path, which can in turn contain Interfaces.",null,null],[3,"Interface","","Interfaces can contain Methods, Properties, and Signals.",null,null],[3,"Property","","Properties that a remote application can get/set.",null,null],[3,"Signal","","Declares that an Interface can send this signal",null,null],[3,"Argument","","a Method has a list of Arguments.",null,null],[3,"Method","","a method that can be called from another application",null,null],[6,"MethodHandler","","A boxed closure for dynamic dispatch. It is called when the method is\ncalled by a remote application.",null,null],[6,"MethodResult","","A method returns either a list of MessageItems, or an error - the tuple\nrepresents the name and message of the Error.",null,null],[6,"PropertyGetResult","","Contains the retrieved MessageItem or an error tuple containing the\nname and message of the error.",null,null],[6,"PropertySetResult","","Contains () or an error tuple containing the name and message of\nthe error.",null,null],[8,"PropertyROHandler","","A read-only property handler.",null,null],[10,"get","","Get a property&#39;s value.",25,null],[8,"PropertyRWHandler","","A read/write property handler.",null,null],[10,"get","","Get a property&#39;s value.",26,null],[10,"set","","Set a property&#39;s value.",26,null],[8,"PropertyWOHandler","","A write-only property handler.",null,null],[10,"set","","Set a property&#39;s value.",27,null],[0,"tree","dbus","Contains functionality for dispatching methods on a D-Bus &quot;server&quot;.\nSupersedes the `obj` module. Properties are somewhat still WIP,\nbut should in any case be better than `obj` already.",null,null],[3,"Factory","dbus::tree","The factory is used to create object paths, interfaces, methods etc.",null,null],[3,"Tree","","A collection of object paths.",null,null],[3,"TreeServer","","An iterator adapter that handles incoming method calls.",null,null],[3,"ObjectPath","","A D-Bus Object Path.",null,null],[3,"Interface","","Represents a D-Bus interface.",null,null],[3,"Signal","","A D-Bus Signal.",null,null],[3,"Property","","A D-Bus Property.",null,null],[3,"Method","","A D-Bus Method.",null,null],[3,"MethodErr","","A D-Bus Method Error.",null,null],[3,"Argument","","A D-Bus Argument.",null,null],[3,"MethodFn","","A MethodType that wraps an Fn function",null,null],[3,"MethodFnMut","","A MethodType that wraps an FnMut function. Calling this recursively will cause a refcell panic.",null,null],[3,"MethodSync","","A MethodType that wraps an Fn+Send+Sync function, so it can be called from several threads in parallel.",null,null],[4,"EmitsChangedSignal","","Enumerates the different signaling behaviors a Property can have\nto being changed.",null,null],[13,"True","","The Property emits a signal that includes the new value.",28,null],[13,"Invalidates","","The Property emits a signal that does not include the new value.",28,null],[13,"Const","","The Property cannot be changed.",28,null],[13,"False","","The Property does not emit a signal when changed.",28,null],[4,"Access","","The possible access characteristics a Property can have.",null,null],[13,"Read","","The Property can only be read (Get).",29,null],[13,"ReadWrite","","The Property can be read or written.",29,null],[13,"Write","","The Property can only be written (Set).",29,null],[6,"MethodResult","","Result containing the Messages returned from the Method, or a MethodErr.",null,null],[6,"TypeSig","dbus","A TypeSig describes the type of a MessageItem.",null,null],[8,"FromMessageItem","","Helper trait for `MessageItem::inner()`",null,null],[10,"from","","Allows converting from a MessageItem into the type it contains.",30,{"inputs":[{"name":"messageitem"}],"output":{"name":"result"}}],[11,"new_custom","","Create a new custom D-Bus Error.",31,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"error"}}],[11,"name","","Error name/type, e g &#39;org.freedesktop.DBus.Error.Failed&#39;",31,null],[11,"message","","Custom message, e g &#39;Could not find a matching object path&#39;",31,null],[11,"drop","","",31,null],[11,"fmt","","",31,null],[11,"description","","",31,null],[11,"fmt","","",31,null],[11,"from_revents","","After running poll, this transforms the revents into a parameter you can send into `Connection::watch_handle`",5,{"inputs":[{"name":"c_short"}],"output":{"name":"c_uint"}}],[11,"fmt","","",8,null],[11,"next","","",32,null],[11,"get_private","","Creates a new D-Bus connection.",33,{"inputs":[{"name":"bustype"}],"output":{"name":"result"}}],[11,"send_with_reply_and_block","","Sends a message over the D-Bus and waits for a reply.\nThis is usually used for method calls.",33,null],[11,"send","","Sends a message over the D-Bus without waiting. Useful for sending signals and method call replies.",33,null],[11,"unique_name","","Get the connection&#39;s unique name.",33,null],[11,"iter","","Check if there are new incoming events",33,null],[11,"register_object_path","","Register an object path.",33,null],[11,"unregister_object_path","","Unregister an object path.",33,null],[11,"list_registered_object_paths","","List registered object paths.",33,null],[11,"register_name","","Register a name.",33,null],[11,"release_name","","Release a name.",33,null],[11,"add_match","","Add a match rule to match messages on the message bus.",33,null],[11,"remove_match","","Remove a match rule to match messages on the message bus.",33,null],[11,"watch_fds","","Async I/O: Get an up-to-date list of file descriptors to watch.",33,null],[11,"watch_handle","","Async I/O: Call this function whenever you detected an event on the Fd,\nFlags are a set of WatchEvent bits.\nThe returned iterator will return pending items only, never block for new events.",33,null],[11,"drop","","",33,null],[11,"fmt","","",33,null],[11,"new","dbus::obj","Create a new Argument.",34,{"inputs":[{"name":"str"},{"name":"t"}],"output":{"name":"argument"}}],[11,"new","","Create a new Signal.",35,{"inputs":[{"name":"n"},{"name":"vec"}],"output":{"name":"signal"}}],[11,"annotate","","Add an Annotation to the Signal.",35,null],[11,"new","","Create a new Method.",36,{"inputs":[{"name":"n"},{"name":"vec"},{"name":"vec"},{"name":"methodhandler"}],"output":{"name":"method"}}],[11,"annotate","","Add an Annotation to the Method.",36,null],[11,"new_ro","","Creates a new read-only Property",37,{"inputs":[{"name":"n"},{"name":"typesig"},{"name":"box"}],"output":{"name":"property"}}],[11,"new_rw","","Creates a new read-write Property",37,{"inputs":[{"name":"n"},{"name":"typesig"},{"name":"box"}],"output":{"name":"property"}}],[11,"new_wo","","Creates a new write-only Property",37,{"inputs":[{"name":"n"},{"name":"typesig"},{"name":"box"}],"output":{"name":"property"}}],[11,"annotate","","Add an annotation to the Property",37,null],[11,"new","","Create a new Interface.",38,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"interface"}}],[11,"drop","","",39,null],[11,"new","","Create a new ObjectPath.",39,{"inputs":[{"name":"connection"},{"name":"str"},{"name":"bool"}],"output":{"name":"objectpath"}}],[11,"insert_interface","","Add an Interface to this ObjectPath.",39,null],[11,"is_registered","","Returns if the ObjectPath is registered.",39,null],[11,"set_registered","","Changes the registration status of the ObjectPath.",39,null],[11,"handle_message","","Handles a method call if the object path matches.\nReturn value: None =&gt; not handled (no match),\nSome(Err(())) =&gt; message reply send failed,\nSome(Ok()) =&gt; message reply send ok */",39,null],[11,"clone","dbus::arg","",40,null],[11,"new","","Creates a new Dict from an iterator. The iterator is consumed when appended.",40,{"inputs":[{"name":"j"}],"output":{"name":"dict"}}],[11,"arg_type","","",40,{"inputs":[],"output":{"name":"i32"}}],[11,"signature","","",40,{"inputs":[],"output":{"name":"signature"}}],[11,"append","","",40,null],[11,"get","","",40,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",40,null],[11,"partial_cmp","","",21,null],[11,"lt","","",21,null],[11,"le","","",21,null],[11,"gt","","",21,null],[11,"ge","","",21,null],[11,"cmp","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"hash","","",21,null],[11,"fmt","","",21,null],[11,"clone","","",21,null],[11,"arg_type","","",21,{"inputs":[],"output":{"name":"i32"}}],[11,"signature","","",21,{"inputs":[],"output":{"name":"signature"}}],[11,"append","","",21,null],[11,"append","","",21,null],[11,"get","","",21,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"get","","",21,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"fmt","","",41,null],[11,"clone","","",41,null],[11,"new","","Creates a new Array from an iterator. The iterator is consumed when appending.",41,{"inputs":[{"name":"j"}],"output":{"name":"array"}}],[11,"arg_type","","",41,{"inputs":[],"output":{"name":"i32"}}],[11,"signature","","",41,{"inputs":[],"output":{"name":"signature"}}],[11,"append","","",41,null],[11,"get","","",41,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",41,null],[11,"clone","","",42,null],[11,"new","","Creates a new IterAppend struct.",42,{"inputs":[{"name":"message"}],"output":{"name":"iterappend"}}],[11,"append","","Appends the argument.",42,null],[11,"fmt","","",43,null],[11,"clone","","",43,null],[11,"description","","",43,null],[11,"cause","","",43,null],[11,"fmt","","",43,null],[11,"clone","","",44,null],[11,"new","","Creates a new struct for iterating over the arguments of a message, starting with the first argument.",44,{"inputs":[{"name":"message"}],"output":{"name":"iter"}}],[11,"get","","Returns the current argument, if T is the argument type. Otherwise returns None.",44,null],[11,"arg_type","","The raw arg_type for the current item.\nUnlike Arg::arg_type, this requires access to self and is not a static method.\nYou can match this against Arg::arg_type for different types to understand what type the current item is.  ",44,null],[11,"next","","Returns false if there are no more items.",44,null],[11,"read","","Wrapper around `get` and `next`. Calls `get`, and then `next` if `get` succeeded.",44,null],[11,"recurse","","If the current argument is a container of the specified arg_type, then a new\nIter is returned which is for iterating over the contents inside the container.",44,null],[11,"fmt","","",44,null],[11,"eq","dbus::tree","",45,null],[11,"ne","","",45,null],[11,"cmp","","",45,null],[11,"partial_cmp","","",45,null],[11,"lt","","",45,null],[11,"le","","",45,null],[11,"gt","","",45,null],[11,"ge","","",45,null],[11,"fmt","","",45,null],[11,"clone","","",45,null],[11,"new","","Create a new Argument.",45,{"inputs":[{"name":"option"},{"name":"signature"}],"output":{"name":"argument"}}],[11,"from","","",45,{"inputs":[{"name":"signature"}],"output":{"name":"argument"}}],[11,"from","","",45,{"inputs":[{"name":"str"}],"output":{"name":"argument"}}],[11,"from","","",45,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"cmp","","",46,null],[11,"partial_cmp","","",46,null],[11,"lt","","",46,null],[11,"le","","",46,null],[11,"gt","","",46,null],[11,"ge","","",46,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"invalid_arg","","Create an Invalid Args MethodErr.",46,{"inputs":[{"name":"t"}],"output":{"name":"methoderr"}}],[11,"no_arg","","Create a MethodErr that there are not enough arguments given.",46,{"inputs":[],"output":{"name":"methoderr"}}],[11,"failed","","Create a MethodErr that the method failed in the way specified.",46,{"inputs":[{"name":"t"}],"output":{"name":"methoderr"}}],[11,"no_interface","","Create a MethodErr that the Interface was unknown.",46,{"inputs":[{"name":"t"}],"output":{"name":"methoderr"}}],[11,"no_property","","Create a MethodErr that the Property was unknown.",46,{"inputs":[{"name":"t"}],"output":{"name":"methoderr"}}],[11,"ro_property","","Create a MethodErr that the Property was read-only.",46,{"inputs":[{"name":"t"}],"output":{"name":"methoderr"}}],[11,"from","","",46,null],[11,"fmt","","",47,null],[11,"fmt","","",48,null],[11,"fmt","","",49,null],[11,"fmt","","",50,null],[11,"in_arg","","Builder method that adds an &quot;in&quot; Argument to this Method.",50,null],[11,"inarg","","Builder method that adds an &quot;in&quot; Argument to this Method.",50,null],[11,"in_args","","Builder method that adds multiple &quot;in&quot; Arguments to this Method.",50,null],[11,"out_arg","","Builder method that adds an &quot;out&quot; Argument to this Method.",50,null],[11,"outarg","","Builder method that adds an &quot;out&quot; Argument to this Method.",50,null],[11,"out_args","","Builder method that adds multiple &quot;out&quot; Arguments to this Method.",50,null],[11,"annotate","","Add an annotation to the method.",50,null],[11,"deprecated","","Add an annotation that this entity is deprecated.",50,null],[11,"call","","Call the Method.",50,null],[11,"fmt","","",51,null],[11,"add_m","","Adds a method to the interface.",51,null],[11,"add_s","","Adds a signal to the interface.",51,null],[11,"add_s_arc","","Adds a signal to the interface. Lets you keep another clone of the signal\n(which you can use to emit the signal, once it belongs to an object path).",51,null],[11,"add_s_ref","","Adds a signal to the interface. Returns a reference to the signal\n(which you can use to emit the signal, once it belongs to an object path).",51,null],[11,"add_p","","Adds a property to the interface.",51,null],[11,"add_p_arc","","Adds a property to the interface. Lets you keep another clone of the property\n(which you can use to get and set the current value of the property).",51,null],[11,"add_p_ref","","Adds a property to the interface. Returns a reference to the property\n(which you can use to get and set the current value of the property).",51,null],[11,"annotate","","Add an annotation to this Inteface.",51,null],[11,"deprecated","","Add an annotation that this entity is deprecated.",51,null],[11,"fmt","","",28,null],[11,"partial_cmp","","",28,null],[11,"cmp","","",28,null],[11,"eq","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",29,null],[11,"partial_cmp","","",29,null],[11,"cmp","","",29,null],[11,"eq","","",29,null],[11,"clone","","",29,null],[11,"fmt","","",52,null],[11,"get_value","","Gets the value of the Property.",52,null],[11,"get_signal","","Gets the signal (if any) associated with the Property.",52,null],[11,"set_value","","Returns error if &quot;emits&quot; is &quot;Const&quot;, and the property is in a\ntree.  Returns messages to be sent over a connection, this\ncould be the PropertiesChanged signal.",52,null],[11,"emits_changed","","Builder method that allows setting the Property&#39;s signal\nbehavior when changed.",52,null],[11,"access","","Builder method that allows setting the Property as readable,\nwritable, or both.",52,null],[11,"remote_get","","Helper method to check accessibility before getting a value.",52,null],[11,"verify_remote_set","","Helper method to verify and extract a MessageItem from a Set message",52,null],[11,"annotate","","Add an annotation to this Property.",52,null],[11,"deprecated","","Add an annotation that this entity is deprecated.",52,null],[11,"on_set","","Sets a callback to be called when a &quot;Set&quot; call is coming in from the remote side.\nMight change to something more ergonomic.\nFor multi-thread use.",52,null],[11,"on_set","","Sets a callback to be called when a &quot;Set&quot; call is coming in from the remote side.\nMight change to something more ergonomic.\nFor single-thread use.",52,null],[11,"on_set","","Sets a callback to be called when a &quot;Set&quot; call is coming in from the remote side.\nMight change to something more ergonomic.\nFor single-thread use.",52,null],[11,"fmt","","",53,null],[11,"emit","","Returns a message which emits the signal when sent.\nPanics if the signal is not inserted in an object path.",53,null],[11,"msg","","Returns a message which emits the signal when sent.\nPanics if the signal is not inserted in an object path.",53,null],[11,"arg","","Builder method that adds an Argument to the Signal.",53,null],[11,"sarg","","Builder method that adds an Argument to the Signal.",53,null],[11,"args","","Builder method that adds multiple &quot;rguments to the Signel.",53,null],[11,"annotate","","Add an annotation to this Signal.",53,null],[11,"deprecated","","Add an annotation that this entity is deprecated.",53,null],[11,"fmt","","",54,null],[11,"add","","Add an Interface to this Object Path.",54,null],[11,"introspectable","","Adds introspection support for this object path.",54,null],[11,"object_manager","","Adds ObjectManager support for this object path.",54,null],[11,"next","","",55,null],[11,"fmt","","",56,null],[11,"add","","Add an Object Path to this Tree.",56,null],[11,"add_o_ref","","Adds an ObjectPath to this Tree. Returns a reference to the ObjectPath.\nThe note for add() also applies here.",56,null],[11,"remove","","Remove a object path from the Tree. Returns the object path removed, or None if not found.",56,null],[11,"set_registered","","Registers or unregisters all object paths in the tree.",56,null],[11,"handle","","Handles a message. Will return None in case the object path was not\nfound, or otherwise a list of messages to be sent back.",56,null],[11,"run","","This method takes an `ConnectionItem` iterator (you get it from `Connection::iter()`)\nand handles all matching items. Non-matching items (e g signals) are passed through.",56,null],[11,"clone","","",57,null],[11,"fmt","","",57,null],[11,"new_fn","","Creates a new factory for single-thread use.",57,{"inputs":[],"output":{"name":"self"}}],[11,"method","","Creates a new method for single-thread use.",57,null],[11,"property","","Creates a new property for single-thread use.",57,null],[11,"interface","","Creates a new interface for single-thread use.",57,null],[11,"tree","","Creates a new tree for single-thread use.",57,null],[11,"object_path","","Creates a new object path for single-thread use.",57,null],[11,"new_fnmut","","Creates a new factory for single-thread + mutable fns use.",57,{"inputs":[],"output":{"name":"self"}}],[11,"method","","Creates a new method for single-thread use.\nThis method can mutate its environment, so it will panic in case\nit is called recursively.",57,null],[11,"property","","Creates a new mutable property for single-thread use.",57,null],[11,"interface","","Creates a new mutable interface for single-thread use.",57,null],[11,"tree","","Creates a new mutable tree for single-thread use.",57,null],[11,"object_path","","Creates a new mutable object path for single-thread use.",57,null],[11,"new_sync","","Creates a new factory for multi-thread use.\nTrees created will be able to Send and Sync, i e,\nit can handle several messages in parallel.",57,{"inputs":[],"output":{"name":"self"}}],[11,"method","","Creates a new method for multi-thread use.\nThis puts bounds on the callback to enable it to be called from several threads\nin parallel.",57,null],[11,"property","","Creates a new property for multi-threaded use.",57,null],[11,"interface","","Creates a new interface for multi-threaded use.",57,null],[11,"tree","","Creates a new tree for multi-threaded use.",57,null],[11,"object_path","","Creates a new object path for multi-threaded use.",57,null],[11,"signal","","Create a Signal.",57,null],[11,"method_sync","","Creates a new method with bounds enough to be used in all trees.",57,null]],"paths":[[4,"BusType"],[4,"NameFlag"],[4,"RequestNameReply"],[4,"ReleaseNameReply"],[4,"MessageType"],[4,"WatchEvent"],[4,"MessageItem"],[4,"ArrayError"],[4,"ConnectionItem"],[3,"OwnedFd"],[3,"Message"],[3,"Props"],[3,"PropHandler"],[3,"Watch"],[3,"String"],[3,"Path"],[3,"Signature"],[3,"Member"],[3,"Interface"],[3,"BusName"],[3,"ErrorName"],[3,"Variant"],[8,"Arg"],[8,"Get"],[8,"Append"],[8,"PropertyROHandler"],[8,"PropertyRWHandler"],[8,"PropertyWOHandler"],[4,"EmitsChangedSignal"],[4,"Access"],[8,"FromMessageItem"],[3,"Error"],[3,"ConnectionItems"],[3,"Connection"],[3,"Argument"],[3,"Signal"],[3,"Method"],[3,"Property"],[3,"Interface"],[3,"ObjectPath"],[3,"Dict"],[3,"Array"],[3,"IterAppend"],[3,"TypeMismatchError"],[3,"Iter"],[3,"Argument"],[3,"MethodErr"],[3,"MethodFn"],[3,"MethodFnMut"],[3,"MethodSync"],[3,"Method"],[3,"Interface"],[3,"Property"],[3,"Signal"],[3,"ObjectPath"],[3,"TreeServer"],[3,"Tree"],[3,"Factory"]]};
initSearch(searchIndex);
